// Generated by Dagger (https://dagger.dev).
package com.example.core.data.remote.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("com.example.core.data.remote.di.ApiKeyQualifier")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation"
})
public final class NetworkModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final Provider<String> apiKeyProvider;

  public NetworkModule_ProvideOkHttpClientFactory(Provider<String> apiKeyProvider) {
    this.apiKeyProvider = apiKeyProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClient(apiKeyProvider.get());
  }

  public static NetworkModule_ProvideOkHttpClientFactory create(Provider<String> apiKeyProvider) {
    return new NetworkModule_ProvideOkHttpClientFactory(apiKeyProvider);
  }

  public static OkHttpClient provideOkHttpClient(String apiKey) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.provideOkHttpClient(apiKey));
  }
}
